/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.41).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.eduit.app.springboot.api;

import com.eduit.app.springboot.model.CartDTO;
import com.eduit.app.springboot.model.ProductCartDTO;
import com.eduit.app.springboot.model.ResponseContainerResponseDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-03-15T19:40:20.264214924Z[GMT]")
@Validated
public interface CartsApi {

    @Operation(summary = "Add a product to the cart", description = "Add a product to the cart, authentication required.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "store" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation response a CartDTO as data", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Access token is missing or invalid") })
    @RequestMapping(value = "/carts/cart/{cartId}/items",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<ResponseContainerResponseDTO> addToCart(@Parameter(in = ParameterIn.PATH, description = "the cartId", required=true, schema=@Schema()) @PathVariable("cartId") String cartId, @Parameter(in = ParameterIn.DEFAULT, description = "The product to be added.", schema=@Schema()) @Valid @RequestBody ProductCartDTO body);


    @Operation(summary = "Buy cart", description = "Buy a cart, authentication required.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "store" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation response a OrderDTO as data", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Access token is missing or invalid") })
    @RequestMapping(value = "/carts/cart/{cartId}/buy",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<ResponseContainerResponseDTO> buyCart(@Parameter(in = ParameterIn.PATH, description = "the cartId", required=true, schema=@Schema()) @PathVariable("cartId") String cartId);


    @Operation(summary = "Create cart", description = "Create a cart, authentication required.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "store" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation response a CartDTO as data", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Access token is missing or invalid") })
    @RequestMapping(value = "/carts/cart",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ResponseContainerResponseDTO> createCart(@Parameter(in = ParameterIn.DEFAULT, description = "Created cart object", schema=@Schema()) @Valid @RequestBody CartDTO body);


    @Operation(summary = "Delete cart", description = "Delete a cart, authentication required.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "store" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation response a EmptyResponseDTO as data", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Access token is missing or invalid") })
    @RequestMapping(value = "/carts/cart/{cartId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<ResponseContainerResponseDTO> deleteCart(@Parameter(in = ParameterIn.PATH, description = "the cartId", required=true, schema=@Schema()) @PathVariable("cartId") String cartId);


    @Operation(summary = "Delete products from cart", description = "Delete products from cart, authentication required.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "store" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation response a EmptyResponseDTO as data", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Access token is missing or invalid") })
    @RequestMapping(value = "/carts/cart/{cartId}/items",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<ResponseContainerResponseDTO> deleteFromCart(@Parameter(in = ParameterIn.PATH, description = "the cartId", required=true, schema=@Schema()) @PathVariable("cartId") String cartId);


    @Operation(summary = "Retrieve cart", description = "Retrieve a cart, authentication required.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "store" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation response a CartDTO as data", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))) })
    @RequestMapping(value = "/carts/cart/{cartId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ResponseContainerResponseDTO> retrieveCart(@Parameter(in = ParameterIn.PATH, description = "the cartId", required=true, schema=@Schema()) @PathVariable("cartId") String cartId);


    @Operation(summary = "Retrieve products in cart", description = "Retrieve products in cart, authentication required.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "store" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation response a ProductCartListDTO as data", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))) })
    @RequestMapping(value = "/carts/cart/{cartId}/items",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ResponseContainerResponseDTO> retrieveProductsInCart(@Parameter(in = ParameterIn.PATH, description = "the cartId", required=true, schema=@Schema()) @PathVariable("cartId") String cartId);

}

